{"ast":null,"code":"import _classCallCheck from \"/Users/goutham/Desktop/work/helioschatexp1/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/goutham/Desktop/work/helioschatexp1/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/goutham/Desktop/work/helioschatexp1/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/goutham/Desktop/work/helioschatexp1/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/goutham/Desktop/work/helioschatexp1/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/goutham/Desktop/work/helioschatexp1/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/goutham/Desktop/work/helioschatexp1/src/chats/TreeMap.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport filepath from './file1.csv';\n\nvar TreeMap =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TreeMap, _Component);\n\n  function TreeMap(props) {\n    var _this;\n\n    _classCallCheck(this, TreeMap);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TreeMap).call(this, props)); // this.myRef = React.createRef();\n\n    _this.createForceLayout = _this.createForceLayout.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(TreeMap, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.createForceLayout();\n    }\n  }, {\n    key: \"createForceLayout\",\n    value: function createForceLayout() {\n      var width = 960,\n          height = 1060;\n      var format = d3.format(\",d\");\n      var color = d3.scaleOrdinal().range(d3.schemeCategory10.map(function (c) {\n        c = d3.rgb(c);\n        c.opacity = 0.6;\n        return c;\n      }));\n      var stratify = d3.stratify().parentId(function (d) {\n        console.log(d);\n        return d.id.substring(0, d.id.lastIndexOf(\".\"));\n      });\n      var treemap = d3.treemap().size([width, height]).padding(1).round(true);\n      d3.csv(filepath).then(function (data, error) {\n        if (error) console.log(error);\n        console.log(data);\n        var root = stratify(data).sum(function (d) {\n          return d.value;\n        }).sort(function (a, b) {\n          return b.height - a.height || b.value - a.value;\n        });\n        treemap(root);\n        d3.select(\"#chart-area\").selectAll(\"svg\").data(root.leaves()).enter().append(\"div\").attr(\"class\", \"node\").attr(\"title\", function (d) {\n          return d.id + \"\\n\" + format(d.value);\n        }).style(\"left\", function (d) {\n          return d.x0 + 250 + \"px\";\n        }).style(\"top\", function (d) {\n          return d.y0 + 50 + \"px\";\n        }).style(\"width\", function (d) {\n          return d.x1 - d.x0 + \"px\";\n        }).style(\"height\", function (d) {\n          return d.y1 - d.y0 + \"px\";\n        }).style(\"background\", function (d) {\n          while (d.depth > 1) {\n            d = d.parent;\n          }\n\n          return color(d.id);\n        }).append(\"div\").attr(\"class\", \"node-label\").text(function (d) {\n          return d.id.substring(d.id.lastIndexOf(\".\") + 1).split(/(?=[A-Z][^A-Z])/g).join(\"\\n\");\n        }).append(\"div\").attr(\"class\", \"node-value\").text(function (d) {\n          return format(d.value);\n        });\n      });\n\n      function type(d) {\n        d.value = +d.value;\n        return d;\n      }\n      /*\n              const w = 1280 - 80,\n              h = 800 - 180,\n              x = d3.scaleLinear().range([0, w]),\n              y = d3.scaleLinear().range([0, h]),\n              color = d3.scaleOrdinal(d3.schemeCategory10);\n              let node,root;\n              \n              const  treemap = d3.treemap()\n              //.round(false)\n              .size([w, h])\n              //.sticky(true)\n              //.value(function(d) { return d.total; });\n              \n              \n              const svg = d3.select(\"#chart-area\").append(\"svg\")\n                  .attr(\"class\", \"chart\")\n                  .style(\"width\", w + \"px\")\n                  .style(\"height\", h + \"px\")\n                .append(\"svg:svg\")\n                  .attr(\"width\", w)\n                  .attr(\"height\", h)\n                .append(\"svg:g\")\n                  .attr(\"transform\", \"translate(.5,.5)\");\n              \n              //d3.json(\"party_asset.json\").then(function(data) {\n      \n                  node = root = data;\n                  console.log(data);\n                 \n                  var nodes = treemap(root)\n                      .filter(function(d) {return !d.children; });\n                      \n                 \n                  var cell = svg.selectAll(\"g\")\n                      .data(nodes)\n                    .enter().append(\"svg:g\")\n                      .attr(\"class\", \"cell\")\n                      .attr(\"transform\", function(d) { return \"translate(\" + d.x + \",\" + d.y + \")\"; })\n                      .on(\"click\", function(d) { return zoom(node == d.parent ? root : d.parent); });\n                \n                  cell.append(\"rect\")\n                      .attr(\"width\", function(d) { return d.dx - 1; })\n                      .attr(\"height\", function(d) { return d.dy - 1; })\n                      .style(\"fill\", function(d) {\n                        console.log('j');\n                        //return color(d.parent.name); \n                      });\n                \n                  cell.append(\"text\")\n                      .attr(\"x\", function(d) { return d.dx / 2; })\n                      .attr(\"y\", function(d) { return d.dy / 2; })\n                      .attr(\"dy\", \".35em\")\n                      .attr(\"text-anchor\", \"middle\")\n                      .text(function(d) { return d.name; })\n                      .style(\"opacity\", function(d) { d.w = this.getComputedTextLength(); return d.dx > d.w ? 1 : 0; });\n                \n                  d3.select(window).on(\"click\", function() { zoom(root); });\n                \n                  d3.select(\"select\").on(\"change\", function() {\n                    //treemap.value(this.value == \"size\" ? size : count).nodes(root);\n                    treemap.value((this.value == \"total\") ? total : (this.value == \"building\") ? building : (this.value == \"ground\") ? ground : cash).nodes(root);\n                    zoom(node);\n                  });\n                //});\n                \n                function size(d) {\n                  return d.size;\n                }\n                \n                function total(d) {\n                  return d.total;\n                }\n                \n                function building(d) {\n                  return d.building;\n                }\n                \n                function ground(d) {\n                  return d.ground;\n                }\n                \n                function cash(d) {\n                  return d.cash;\n                }\n                \n                function count(d) {\n                  return 1;\n                }\n                \n                function zoom(d) {\n                  var kx = w / d.dx, ky = h / d.dy;\n                  x.domain([d.x, d.x + d.dx]);\n                  y.domain([d.y, d.y + d.dy]);\n                const svg ='';\n                  var t = svg.selectAll(\"g.cell\").transition()\n                      .duration(d3.event.altKey ? 7500 : 750)\n                      .attr(\"transform\", function(d) { return \"translate(\" + x(d.x) + \",\" + y(d.y) + \")\"; });\n                \n                  t.select(\"rect\")\n                      .attr(\"width\", function(d) { return kx * d.dx - 1; })\n                      .attr(\"height\", function(d) { return ky * d.dy - 1; })\n                \n                  t.select(\"text\")\n                      .attr(\"x\", function(d) { return kx * d.dx / 2; })\n                      .attr(\"y\", function(d) { return ky * d.dy / 2; })\n                      .style(\"opacity\", function(d) { return kx * d.dx > d.w ? 1 : 0; });\n                \n                  node = d;\n                  d3.event.stopPropagation();\n                }\n                */\n\n      /*\n               var width = 420, height = 340;\n      \n               var layouts = ['treemapBinary', 'treemapDice', 'treemapSlice', 'treemapSliceDice', 'treemapSquarify'];\n               \n               var treemapLayout = d3.treemap()\n                 .size([400, 300])\n                 .paddingOuter(16);\n               \n               var rootNode = d3.hierarchy(data)\n               rootNode.sum(function(d) {\n                 return d.size;\n               });\n               \n               function enteringTreemap(d) {\n               \n                 treemapLayout.tile(d3[d])\n                 treemapLayout(rootNode);\n               \n                 d3.select(this)\n                   .append('text')\n                   .text(function(d) {return d})\n                   .attr('dy', 14)\n               \n                 var nodes = d3.select(this)\n                   .append('g')\n                   .attr('transform', 'translate(0, 20)')\n                   .selectAll('g')\n                   .data(rootNode.descendants())\n                   .enter()\n                   .append('g')\n                   .attr('transform', function(d) {return 'translate(' + [d.x0, d.y0] + ')'})\n               \n                 nodes\n                   .append('rect')\n                   .attr('width', function(d) { return d.x1 - d.x0; })\n                   .attr('height', function(d) { return d.y1 - d.y0; })\n               \n                 nodes\n                   .append('text')\n                   .attr('dx', 4)\n                   .attr('dy', 14)\n                   .text(function(d) {\n                     return d.data.name;\n                   })\n               }\n               \n               var treemaps = d3.select('#chart-area')\n                 .selectAll('svg')\n                 .data(layouts)\n                 .enter()\n                 .append('svg')\n                 .attr('width', width + 'px')\n                 .attr('height', height + 'px')\n                 .each(enteringTreemap)\n                 */\n\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"chart-area\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return TreeMap;\n}(Component);\n\nexport default TreeMap;","map":{"version":3,"sources":["/Users/goutham/Desktop/work/helioschatexp1/src/chats/TreeMap.js"],"names":["React","Component","d3","filepath","TreeMap","props","createForceLayout","bind","width","height","format","color","scaleOrdinal","range","schemeCategory10","map","c","rgb","opacity","stratify","parentId","d","console","log","id","substring","lastIndexOf","treemap","size","padding","round","csv","then","data","error","root","sum","value","sort","a","b","select","selectAll","leaves","enter","append","attr","style","x0","y0","x1","y1","depth","parent","text","split","join","type"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport filepath from './file1.csv';\n\n   \n\n\nclass TreeMap extends Component {\n\n    constructor(props) {\n        super(props);\n        // this.myRef = React.createRef();\n        this.createForceLayout =  this.createForceLayout.bind(this);\n      }\n      componentDidMount() {\n        this.createForceLayout();\n      }\n      createForceLayout() {\n\n\n        var width = 960,\n    height = 1060;\n\nvar format = d3.format(\",d\");\n\nvar color = d3.scaleOrdinal()\n    .range(d3.schemeCategory10\n        .map(function(c) { c = d3.rgb(c); c.opacity = 0.6; return c; }));\n\nvar stratify = d3.stratify()\n    .parentId(function(d) {\n      console.log(d);\n       return d.id.substring(0, d.id.lastIndexOf(\".\"));\n       });\n\nvar treemap = d3.treemap()\n    .size([width, height])\n    .padding(1)\n    .round(true);\n\nd3.csv(filepath).then(function(data, error) {\n  if (error) console.log(error);\nconsole.log(data);\n  var root = stratify(data)\n      .sum(function(d) { return d.value; })\n      .sort(function(a, b) { return b.height - a.height || b.value - a.value; });\n\n  treemap(root);\n\n  d3.select(\"#chart-area\")\n    .selectAll(\"svg\")\n    .data(root.leaves())\n    .enter().append(\"div\")\n      .attr(\"class\", \"node\")\n      .attr(\"title\", function(d) { return d.id + \"\\n\" + format(d.value); })\n      .style(\"left\", function(d) { return d.x0+250 + \"px\"; })\n      .style(\"top\", function(d) { return d.y0 +50+ \"px\"; })\n      .style(\"width\", function(d) { return d.x1 - d.x0 + \"px\"; })\n      .style(\"height\", function(d) { return d.y1 - d.y0 + \"px\"; })\n      .style(\"background\", function(d) { while (d.depth > 1) d = d.parent; return color(d.id); })\n    .append(\"div\")\n      .attr(\"class\", \"node-label\")\n      .text(function(d) { return d.id.substring(d.id.lastIndexOf(\".\") + 1).split(/(?=[A-Z][^A-Z])/g).join(\"\\n\"); })\n    .append(\"div\")\n      .attr(\"class\", \"node-value\")\n      .text(function(d) { return format(d.value); });\n});\n\nfunction type(d) {\n  d.value = +d.value;\n  return d;\n}\n/*\n        const w = 1280 - 80,\n        h = 800 - 180,\n        x = d3.scaleLinear().range([0, w]),\n        y = d3.scaleLinear().range([0, h]),\n        color = d3.scaleOrdinal(d3.schemeCategory10);\n        let node,root;\n        \n        const  treemap = d3.treemap()\n        //.round(false)\n        .size([w, h])\n        //.sticky(true)\n        //.value(function(d) { return d.total; });\n        \n        \n        const svg = d3.select(\"#chart-area\").append(\"svg\")\n            .attr(\"class\", \"chart\")\n            .style(\"width\", w + \"px\")\n            .style(\"height\", h + \"px\")\n          .append(\"svg:svg\")\n            .attr(\"width\", w)\n            .attr(\"height\", h)\n          .append(\"svg:g\")\n            .attr(\"transform\", \"translate(.5,.5)\");\n        \n        //d3.json(\"party_asset.json\").then(function(data) {\n\n            node = root = data;\n            console.log(data);\n           \n            var nodes = treemap(root)\n                .filter(function(d) {return !d.children; });\n                \n           \n            var cell = svg.selectAll(\"g\")\n                .data(nodes)\n              .enter().append(\"svg:g\")\n                .attr(\"class\", \"cell\")\n                .attr(\"transform\", function(d) { return \"translate(\" + d.x + \",\" + d.y + \")\"; })\n                .on(\"click\", function(d) { return zoom(node == d.parent ? root : d.parent); });\n          \n            cell.append(\"rect\")\n                .attr(\"width\", function(d) { return d.dx - 1; })\n                .attr(\"height\", function(d) { return d.dy - 1; })\n                .style(\"fill\", function(d) {\n                  console.log('j');\n                  //return color(d.parent.name); \n                });\n          \n            cell.append(\"text\")\n                .attr(\"x\", function(d) { return d.dx / 2; })\n                .attr(\"y\", function(d) { return d.dy / 2; })\n                .attr(\"dy\", \".35em\")\n                .attr(\"text-anchor\", \"middle\")\n                .text(function(d) { return d.name; })\n                .style(\"opacity\", function(d) { d.w = this.getComputedTextLength(); return d.dx > d.w ? 1 : 0; });\n          \n            d3.select(window).on(\"click\", function() { zoom(root); });\n          \n            d3.select(\"select\").on(\"change\", function() {\n              //treemap.value(this.value == \"size\" ? size : count).nodes(root);\n              treemap.value((this.value == \"total\") ? total : (this.value == \"building\") ? building : (this.value == \"ground\") ? ground : cash).nodes(root);\n              zoom(node);\n            });\n          //});\n          \n          function size(d) {\n            return d.size;\n          }\n          \n          function total(d) {\n            return d.total;\n          }\n          \n          function building(d) {\n            return d.building;\n          }\n          \n          function ground(d) {\n            return d.ground;\n          }\n          \n          function cash(d) {\n            return d.cash;\n          }\n          \n          function count(d) {\n            return 1;\n          }\n          \n          function zoom(d) {\n            var kx = w / d.dx, ky = h / d.dy;\n            x.domain([d.x, d.x + d.dx]);\n            y.domain([d.y, d.y + d.dy]);\n          const svg ='';\n            var t = svg.selectAll(\"g.cell\").transition()\n                .duration(d3.event.altKey ? 7500 : 750)\n                .attr(\"transform\", function(d) { return \"translate(\" + x(d.x) + \",\" + y(d.y) + \")\"; });\n          \n            t.select(\"rect\")\n                .attr(\"width\", function(d) { return kx * d.dx - 1; })\n                .attr(\"height\", function(d) { return ky * d.dy - 1; })\n          \n            t.select(\"text\")\n                .attr(\"x\", function(d) { return kx * d.dx / 2; })\n                .attr(\"y\", function(d) { return ky * d.dy / 2; })\n                .style(\"opacity\", function(d) { return kx * d.dx > d.w ? 1 : 0; });\n          \n            node = d;\n            d3.event.stopPropagation();\n          }\n          */\n/*\n         var width = 420, height = 340;\n\n         var layouts = ['treemapBinary', 'treemapDice', 'treemapSlice', 'treemapSliceDice', 'treemapSquarify'];\n         \n         var treemapLayout = d3.treemap()\n           .size([400, 300])\n           .paddingOuter(16);\n         \n         var rootNode = d3.hierarchy(data)\n         rootNode.sum(function(d) {\n           return d.size;\n         });\n         \n         function enteringTreemap(d) {\n         \n           treemapLayout.tile(d3[d])\n           treemapLayout(rootNode);\n         \n           d3.select(this)\n             .append('text')\n             .text(function(d) {return d})\n             .attr('dy', 14)\n         \n           var nodes = d3.select(this)\n             .append('g')\n             .attr('transform', 'translate(0, 20)')\n             .selectAll('g')\n             .data(rootNode.descendants())\n             .enter()\n             .append('g')\n             .attr('transform', function(d) {return 'translate(' + [d.x0, d.y0] + ')'})\n         \n           nodes\n             .append('rect')\n             .attr('width', function(d) { return d.x1 - d.x0; })\n             .attr('height', function(d) { return d.y1 - d.y0; })\n         \n           nodes\n             .append('text')\n             .attr('dx', 4)\n             .attr('dy', 14)\n             .text(function(d) {\n               return d.data.name;\n             })\n         }\n         \n         var treemaps = d3.select('#chart-area')\n           .selectAll('svg')\n           .data(layouts)\n           .enter()\n           .append('svg')\n           .attr('width', width + 'px')\n           .attr('height', height + 'px')\n           .each(enteringTreemap)\n           */\n      }\n      render() {\n        return (\n            <div className=\"container\">\n            <div className=\"row\">\n                <div id=\"chart-area\"></div>\n            </div>\n        </div>\n        );\n    }\n\n}\n\nexport default TreeMap;"]},"metadata":{},"sourceType":"module"}