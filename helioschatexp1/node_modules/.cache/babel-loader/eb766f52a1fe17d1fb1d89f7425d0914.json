{"ast":null,"code":"import _classCallCheck from \"/Users/goutham/Desktop/work/helioschatexp1/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/goutham/Desktop/work/helioschatexp1/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/goutham/Desktop/work/helioschatexp1/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/goutham/Desktop/work/helioschatexp1/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/goutham/Desktop/work/helioschatexp1/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/goutham/Desktop/work/helioschatexp1/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _objectSpread from \"/Users/goutham/Desktop/work/helioschatexp1/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/goutham/Desktop/work/helioschatexp1/src/datagridV.js\";\nimport React, { Component } from \"react\";\nimport ReactDataGrid from \"react-data-grid\";\nimport CustomRowRenderer from './CustomRowRenderer'; // import { Menu } from \"react-data-grid-addons\";\n\nimport ReactDOM from 'react-dom';\nimport createRowData from \"./createRowData\";\nimport { Menu, Data } from \"react-data-grid-addons\";\nvar ContextMenu = Menu.ContextMenu,\n    MenuItem = Menu.MenuItem,\n    SubMenu = Menu.SubMenu,\n    ContextMenuTrigger = Menu.ContextMenuTrigger;\nvar scrolloffset = 150;\nvar defaultColumnProperties = {\n  // resizable: true,\n  // frozen: true,\n  width: 120\n};\nvar ROW_COUNT = 50;\n/*\nconst columns = [\n{ key: \"id\", name: \"ID\", frozen: true,sortDescendingFirst: true,headerRenderer:<ContextMenuTrigger id=\"some_unique_identifier\">\n<div className=\"well\">ID</div>\n</ContextMenuTrigger> },\n{ key: \"title\", name: \"Title\", editable: true,sortable: true, filterable: true, headerRenderer:<ContextMenuTrigger id=\"some_unique_identifier\">\n<div className=\"well\">title</div>\n</ContextMenuTrigger>, resizable: true},\n{ key: \"complete\", name: \"Complete\", editable: true,sortable: true ,resizable: true,}\n].map(c => ({ \n  ...c, // ...defaultColumnProperties \n}));\n*/\n\nvar columns = [{\n  key: \"id\",\n  name: \"ID\"\n}, {\n  key: \"firstName\",\n  name: \"First Name\"\n}, {\n  key: \"lastName\",\n  name: \"Last Name\"\n}, {\n  key: \"jobTitle\",\n  name: \"Job Title\"\n}, {\n  key: \"jobArea\",\n  name: \"Job Area\"\n}, {\n  key: \"jobType\",\n  name: \"Job Type\"\n}, {\n  key: \"email\",\n  name: \"Email\"\n}, {\n  key: \"street\",\n  name: \"Street\"\n}, {\n  key: \"zipCode\",\n  name: \"ZipCode\"\n}, {\n  key: \"date\",\n  name: \"Date\"\n}, {\n  key: \"catchPhrase\",\n  name: \"Catch Phrase\"\n}].map(function (c) {\n  return _objectSpread({}, c, defaultColumnProperties);\n});\n/*\nconst rows = [\n  { id: 0, title: \"Task 1\", complete: 20 },\n  { id: 1, title: \"Task 2\", complete: 30 },\n  { id: 2, title: \"Task 3\", complete: 40 },\n  { id: 3, title: \"Task 4\", complete: 50 },\n  { id: 4, title: \"Task 5\", complete: 60 },\n  { id: 5, title: \"Task 6\", complete: 70 },\n\n  \n  \n];\n*/\n\nvar rows = createRowData(ROW_COUNT);\nconsole.log(rows);\n\nfor (var i = 0; i < 1000000; i++) {//rows.push({ id: 2, title: \"Task 3\", complete: 60 });\n}\n\nvar datagridV =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(datagridV, _Component);\n\n  function datagridV(props) {\n    var _this;\n\n    _classCallCheck(this, datagridV);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(datagridV).call(this, props));\n    _this.state = {\n      rows: rows\n    };\n\n    _this.onGridRowsUpdated = function (_ref) {\n      var fromRow = _ref.fromRow,\n          toRow = _ref.toRow,\n          updated = _ref.updated;\n\n      _this.setState(function (state) {\n        var rows = state.rows.slice();\n\n        for (var _i = fromRow; _i <= toRow; _i++) {\n          rows[_i] = _objectSpread({}, rows[_i], updated);\n        }\n\n        return {\n          rows: rows\n        };\n      });\n    };\n\n    _this.rowGetter = _this.rowGetter.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleGridSort = _this.handleGridSort.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.ExampleContextMenu = _this.ExampleContextMenu.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onScroll = _this.onScroll.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getSubRowDetails = _this.getSubRowDetails.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onCellExpand = _this.onCellExpand.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(datagridV, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var height = this.divElement.clientHeight;\n      console.log('height', height);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var viewportHeight = this.divElement.grid;\n      var height = this.divElement.clientHeight;\n      console.log(viewportHeight);\n      /*\n      document.body.addEventListener('contextmenu', function (evt) {\n          // console.log(evt.target.className);\n          if (evt.target.className === 'react-grid-HeaderCell-sortable') {\n              // ContextMenuTrigger();\n              ContextMenuTrigger()\n              console.log('Hello');\n          }\n          evt.preventDefault();\n      }, true);\n      asyncRowGetter(rowIndex) {\n      let result = this.props.defaultRow;\n      if (!this.state.rows[rowIndex]) {\n        if (!this.rowStatus[rowIndex]) {\n          this.props.getRow(rowIndex).then((response) => {\n            const rows = this.state.rows.slice(0);\n            rows[rowIndex] = response;\n            this.setState({\n              rows: rows\n            });\n          });\n          this.rowStatus[rowIndex] = true;\n        }\n      } else {\n        result = this.state.rows[rowIndex];\n      }\n      return result;\n      }\n      */\n      // ReactDOM.findDOMNode(this).addEventListener('nv-event', this._handleNVEvent);\n    }\n  }, {\n    key: \"onScroll\",\n    value: function onScroll(event) {\n      //console.log('onScroll',event);\n      var result = this.state.rows;\n      var row = {\n        id: 0,\n        title: \"Goutham\",\n        complete: 20\n      };\n      var rows = this.state.rows.slice(0);\n      rows[this.state.rows.length] = row; // const rows = {...result,...row}\n      // console.log(this.state.rows.length);\n      // this.setState({rows:rows});\n\n      var scrolltop = event.scrollTop;\n      console.log(scrolltop); //console.log(scrolltop, scrolloffset);\n\n      if (scrolltop >= scrolloffset) {\n        scrolloffset = scrolloffset + 50;\n        this.setState({\n          rows: Data.Selectors.getRows({\n            rows: rows\n          })\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {//ReactDOM.findDOMNode(this).removeEventListener('nv-event', this._handleNVEvent);\n    }\n  }, {\n    key: \"rowGetter\",\n    value: function rowGetter(i) {\n      console.log('PP', i);\n      return this.state.rows[i];\n    }\n  }, {\n    key: \"handleGridSort\",\n    value: function handleGridSort(sortColumn, sortDirection) {\n      console.log(sortColumn, sortDirection);\n    }\n  }, {\n    key: \"ExampleContextMenu\",\n    value: function ExampleContextMenu() {\n      return React.createElement(ContextMenu, {\n        id: \"some_unique_identifier\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(MenuItem, {\n        data: {\n          foo: 'bar'\n        },\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, \"ContextMenu Item 1\"), React.createElement(MenuItem, {\n        data: {\n          foo: 'bar'\n        },\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, \"ContextMenu Item 2\"), React.createElement(MenuItem, {\n        divider: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }), React.createElement(MenuItem, {\n        data: {\n          foo: 'bar'\n        },\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, \"ContextMenu Item 8888\"));\n    }\n  }, {\n    key: \"getSubRowDetails\",\n    value: function getSubRowDetails(rowItem) {\n      console.log(rowItem);\n      /*\n      let isExpanded = this.state.expanded[rowItem.site] ? this.state.expanded[rowItem.site] : false;\n      return {\n          group: rowItem.children && rowItem.children.length > 0,\n          expanded: isExpanded,\n          children: rowItem.children,\n          field: ['site' , 'projects'],\n          treeDepth: rowItem.treeDepth || 0,\n          siblingIndex: rowItem.siblingIndex,\n          numberSiblings: rowItem.numberSiblings\n      };\n      */\n    }\n  }, {\n    key: \"onCellExpand\",\n    value: function onCellExpand() {} //i => this.state.rows[i]\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var groupedRows = Data.Selectors.getRows(this.state);\n      console.log(groupedRows);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, React.createElement(ReactDataGrid, {\n        ref: function ref(divElement) {\n          return _this2.divElement = divElement;\n        },\n        columns: columns,\n        rowGetter: function rowGetter(i) {\n          return groupedRows[i];\n        },\n        rowsCount: groupedRows.length,\n        minHeight: 800,\n        minWidth: 800 // minColumnWidth={50}\n        // onGridRowsUpdated={this.onGridRowsUpdated}  // totla numer of rows*35 - mimum height\n        ,\n        enableCellSelect: true,\n        onGridSort: this.handleGridSort,\n        contextMenu: this.ExampleContextMenu(),\n        onScroll: this.onScroll // rowRenderer={CustomRowRenderer}\n        // RowsContainer={ContextMenuTrigger}\n        ,\n        onColumnResize: function onColumnResize(idx, width) {\n          return console.log(\"Column \".concat(idx, \" has been resized to \").concat(width));\n        },\n        rowHeight: 50,\n        getSubRowDetails: this.getSubRowDetails,\n        onCellExpand: function onCellExpand(args) {\n          return _this2.onCellExpand(args);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return datagridV;\n}(Component);\n\nexport default datagridV;","map":{"version":3,"sources":["/Users/goutham/Desktop/work/helioschatexp1/src/datagridV.js"],"names":["React","Component","ReactDataGrid","CustomRowRenderer","ReactDOM","createRowData","Menu","Data","ContextMenu","MenuItem","SubMenu","ContextMenuTrigger","scrolloffset","defaultColumnProperties","width","ROW_COUNT","columns","key","name","map","c","rows","console","log","i","datagridV","props","state","onGridRowsUpdated","fromRow","toRow","updated","setState","slice","rowGetter","bind","handleGridSort","ExampleContextMenu","onScroll","getSubRowDetails","onCellExpand","height","divElement","clientHeight","viewportHeight","grid","event","result","row","id","title","complete","length","scrolltop","scrollTop","Selectors","getRows","sortColumn","sortDirection","foo","handleClick","rowItem","groupedRows","idx","args"],"mappings":"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","sourcesContent":["\nimport React,{Component } from \"react\";\nimport ReactDataGrid from \"react-data-grid\";\nimport CustomRowRenderer from './CustomRowRenderer';\n// import { Menu } from \"react-data-grid-addons\";\nimport ReactDOM from 'react-dom';\nimport createRowData from \"./createRowData\";\nimport { Menu,Data } from \"react-data-grid-addons\";\n\n  const { ContextMenu, MenuItem, SubMenu, ContextMenuTrigger } = Menu;\n  var scrolloffset=150; \nconst defaultColumnProperties = {\n    // resizable: true,\n    // frozen: true,\n    width: 120\n  };\n  const ROW_COUNT = 50;\n  /*\nconst columns = [\n  { key: \"id\", name: \"ID\", frozen: true,sortDescendingFirst: true,headerRenderer:<ContextMenuTrigger id=\"some_unique_identifier\">\n  <div className=\"well\">ID</div>\n</ContextMenuTrigger> },\n  { key: \"title\", name: \"Title\", editable: true,sortable: true, filterable: true, headerRenderer:<ContextMenuTrigger id=\"some_unique_identifier\">\n  <div className=\"well\">title</div>\n</ContextMenuTrigger>, resizable: true},\n  { key: \"complete\", name: \"Complete\", editable: true,sortable: true ,resizable: true,}\n].map(c => ({ \n    ...c, // ...defaultColumnProperties \n}));\n*/\n\n\nconst columns = [\n  {\n    key: \"id\",\n    name: \"ID\"\n  },\n  {\n    key: \"firstName\",\n    name: \"First Name\"\n  },\n  {\n    key: \"lastName\",\n    name: \"Last Name\"\n  },\n  {\n    key: \"jobTitle\",\n    name: \"Job Title\"\n  },\n  {\n    key: \"jobArea\",\n    name: \"Job Area\"\n  },\n  {\n    key: \"jobType\",\n    name: \"Job Type\"\n  },\n  {\n    key: \"email\",\n    name: \"Email\"\n  },\n  {\n    key: \"street\",\n    name: \"Street\"\n  },\n  {\n    key: \"zipCode\",\n    name: \"ZipCode\"\n  },\n  {\n    key: \"date\",\n    name: \"Date\"\n  },\n  {\n    key: \"catchPhrase\",\n    name: \"Catch Phrase\"\n  }\n].map(c => ({ ...c, ...defaultColumnProperties }));\n/*\nconst rows = [\n  { id: 0, title: \"Task 1\", complete: 20 },\n  { id: 1, title: \"Task 2\", complete: 30 },\n  { id: 2, title: \"Task 3\", complete: 40 },\n  { id: 3, title: \"Task 4\", complete: 50 },\n  { id: 4, title: \"Task 5\", complete: 60 },\n  { id: 5, title: \"Task 6\", complete: 70 },\n\n  \n  \n];\n*/\nconst rows= createRowData(ROW_COUNT);\nconsole.log(rows);\nfor (let i=0;i<1000000;i++) {\n  //rows.push({ id: 2, title: \"Task 3\", complete: 60 });\n}\nclass datagridV extends Component {\n  state = { rows };\n\n  onGridRowsUpdated = ({ fromRow, toRow, updated }) => {\n    this.setState(state => {\n      const rows = state.rows.slice();\n      for (let i = fromRow; i <= toRow; i++) {\n        rows[i] = { ...rows[i], ...updated };\n      }\n      return { rows };\n    });\n  };\nconstructor(props) {\n    super(props);\n    this.rowGetter = this.rowGetter.bind(this);\n    this.handleGridSort = this.handleGridSort.bind(this);\n    this.ExampleContextMenu = this.ExampleContextMenu.bind(this);\n    this.onScroll = this.onScroll.bind(this);\n    this.getSubRowDetails = this.getSubRowDetails.bind(this);\n    this.onCellExpand = this.onCellExpand.bind(this);\n}\n\ncomponentDidUpdate() {\n  var height = this.divElement.clientHeight;\n  console.log('height',height);\n}\n\n\ncomponentDidMount() {\n  const viewportHeight= this.divElement.grid;\n\n  const height = this.divElement.clientHeight;\n  console.log(viewportHeight);\n    /*\n    document.body.addEventListener('contextmenu', function (evt) {\n        // console.log(evt.target.className);\n        if (evt.target.className === 'react-grid-HeaderCell-sortable') {\n            // ContextMenuTrigger();\n            ContextMenuTrigger()\n            console.log('Hello');\n        }\n        evt.preventDefault();\n    }, true);\n    asyncRowGetter(rowIndex) {\n    let result = this.props.defaultRow;\n    if (!this.state.rows[rowIndex]) {\n      if (!this.rowStatus[rowIndex]) {\n        this.props.getRow(rowIndex).then((response) => {\n          const rows = this.state.rows.slice(0);\n          rows[rowIndex] = response;\n          this.setState({\n            rows: rows\n          });\n        });\n        this.rowStatus[rowIndex] = true;\n      }\n    } else {\n      result = this.state.rows[rowIndex];\n    }\n    return result;\n  }\n    */\n    // ReactDOM.findDOMNode(this).addEventListener('nv-event', this._handleNVEvent);\n}\n\nonScroll(event) {\n  //console.log('onScroll',event);\n  \n  let result = this.state.rows;\n  const row = { id: 0, title: \"Goutham\", complete: 20 }\n\n  const rows = this.state.rows.slice(0);\n  rows[this.state.rows.length] = row;\n  // const rows = {...result,...row}\n  // console.log(this.state.rows.length);\n   // this.setState({rows:rows});\n   var scrolltop=event.scrollTop; \n \n\nconsole.log(scrolltop);\n\n//console.log(scrolltop, scrolloffset);\n   if(scrolltop >= scrolloffset)  {\n     \n    scrolloffset=scrolloffset+50;\n    this.setState({\n       rows: Data.Selectors.getRows({rows:rows})\n    });\n  }\n}\n\ncomponentWillUnmount() {\n    //ReactDOM.findDOMNode(this).removeEventListener('nv-event', this._handleNVEvent);\n}\n\nrowGetter(i) {\n    console.log('PP',i  );\n    return this.state.rows[i]\n}\n\nhandleGridSort(sortColumn, sortDirection) {\n    console.log(sortColumn, sortDirection);\n}\nExampleContextMenu() {\n  return (<ContextMenu id=\"some_unique_identifier\">\n  <MenuItem data={{foo: 'bar'}} onClick={this.handleClick}>\n    ContextMenu Item 1\n  </MenuItem>\n  <MenuItem data={{foo: 'bar'}} onClick={this.handleClick}>\n    ContextMenu Item 2\n  </MenuItem>\n  <MenuItem divider />\n  <MenuItem data={{foo: 'bar'}} onClick={this.handleClick}>\n    ContextMenu Item 8888\n  </MenuItem>\n</ContextMenu>);\n}\n\ngetSubRowDetails(rowItem)  {\n  console.log(rowItem);\n  /*\n  let isExpanded = this.state.expanded[rowItem.site] ? this.state.expanded[rowItem.site] : false;\n  return {\n      group: rowItem.children && rowItem.children.length > 0,\n      expanded: isExpanded,\n      children: rowItem.children,\n      field: ['site' , 'projects'],\n      treeDepth: rowItem.treeDepth || 0,\n      siblingIndex: rowItem.siblingIndex,\n      numberSiblings: rowItem.numberSiblings\n  };\n  */\n}\n\nonCellExpand() {\n  \n}\n  //i => this.state.rows[i]\n  render() {\n    \n    const groupedRows = Data.Selectors.getRows(this.state);\n    console.log(groupedRows);\n    return (\n        <div>\n \n \n      <ReactDataGrid\n        ref={ (divElement) => this.divElement = divElement}\n        columns={columns}\n        rowGetter={i=>groupedRows[i]}\n        rowsCount={groupedRows.length}\n        minHeight={800}\n        minWidth={800}\n        // minColumnWidth={50}\n        // onGridRowsUpdated={this.onGridRowsUpdated}  // totla numer of rows*35 - mimum height\n        enableCellSelect={true}\n        onGridSort={this.handleGridSort}\n        contextMenu={\n          this.ExampleContextMenu()\n        }\n        onScroll={this.onScroll}\n        // rowRenderer={CustomRowRenderer}\n        // RowsContainer={ContextMenuTrigger}\n        onColumnResize={(idx, width) =>\n            console.log(`Column ${idx} has been resized to ${width}`)\n          }\n          rowHeight={50}\n          getSubRowDetails={this.getSubRowDetails}\n          onCellExpand={(args)=>this.onCellExpand(args)}\n\n          \n\n      />\n      </div>\n    );\n    \n  }\n}\nexport default datagridV;\n\n\n"]},"metadata":{},"sourceType":"module"}