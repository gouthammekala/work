{"ast":null,"code":"import _objectSpread from \"/Users/goutham/Desktop/helioschatexp/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/goutham/Desktop/helioschatexp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/goutham/Desktop/helioschatexp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/goutham/Desktop/helioschatexp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/goutham/Desktop/helioschatexp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/goutham/Desktop/helioschatexp/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/goutham/Desktop/helioschatexp/src/datagridV.js\";\nimport React, { Component } from \"react\";\nimport ReactDataGrid from \"react-data-grid\";\nimport CustomRowRenderer from './CustomRowRenderer';\nvar defaultColumnProperties = {\n  // resizable: true,\n  frozen: true,\n  width: 120\n};\nvar columns = [{\n  key: \"id\",\n  name: \"ID\",\n  editable: true\n}, {\n  key: \"title\",\n  name: \"Title\",\n  editable: true\n}, {\n  key: \"complete\",\n  name: \"Complete\",\n  editable: true\n}].map(function (c) {\n  console.log(c); // return (...c, ...defaultColumnProperties); \n});\nvar rows = [{\n  id: 0,\n  title: \"Task 1\",\n  complete: 20\n}, {\n  id: 1,\n  title: \"Task 2\",\n  complete: 40\n}, {\n  id: 2,\n  title: \"Task 3\",\n  complete: 60\n}];\n\nvar datagridV =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(datagridV, _Component);\n\n  function datagridV() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, datagridV);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(datagridV)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      rows: rows\n    };\n\n    _this.onGridRowsUpdated = function (_ref) {\n      var fromRow = _ref.fromRow,\n          toRow = _ref.toRow,\n          updated = _ref.updated;\n\n      _this.setState(function (state) {\n        var rows = state.rows.slice();\n\n        for (var i = fromRow; i <= toRow; i++) {\n          rows[i] = _objectSpread({}, rows[i], updated);\n        }\n\n        return {\n          rows: rows\n        };\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(datagridV, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(ReactDataGrid, {\n        columns: columns,\n        rowGetter: function rowGetter(i) {\n          return _this2.state.rows[i];\n        },\n        rowsCount: 3,\n        onGridRowsUpdated: this.onGridRowsUpdated,\n        enableCellSelect: true,\n        rowRenderer: CustomRowRenderer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return datagridV;\n}(Component);\n\nexport default datagridV;","map":{"version":3,"sources":["/Users/goutham/Desktop/helioschatexp/src/datagridV.js"],"names":["React","Component","ReactDataGrid","CustomRowRenderer","defaultColumnProperties","frozen","width","columns","key","name","editable","map","c","console","log","rows","id","title","complete","datagridV","state","onGridRowsUpdated","fromRow","toRow","updated","setState","slice","i"],"mappings":";;;;;;;AACA,OAAOA,KAAP,IAAcC,SAAd,QAA+B,OAA/B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AAEA,IAAMC,uBAAuB,GAAG;AAC5B;AACAC,EAAAA,MAAM,EAAE,IAFoB;AAG5BC,EAAAA,KAAK,EAAE;AAHqB,CAAhC;AAMA,IAAMC,OAAO,GAAG,CACd;AAAEC,EAAAA,GAAG,EAAE,IAAP;AAAaC,EAAAA,IAAI,EAAE,IAAnB;AAAyBC,EAAAA,QAAQ,EAAE;AAAnC,CADc,EAEd;AAAEF,EAAAA,GAAG,EAAE,OAAP;AAAgBC,EAAAA,IAAI,EAAE,OAAtB;AAA+BC,EAAAA,QAAQ,EAAE;AAAzC,CAFc,EAGd;AAAEF,EAAAA,GAAG,EAAE,UAAP;AAAmBC,EAAAA,IAAI,EAAE,UAAzB;AAAqCC,EAAAA,QAAQ,EAAE;AAA/C,CAHc,EAIdC,GAJc,CAIV,UAAAC,CAAC,EAAI;AACPC,EAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ,EADO,CAEP;AACH,CAPe,CAAhB;AASA,IAAMG,IAAI,GAAG,CACX;AAAEC,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,KAAK,EAAE,QAAhB;AAA0BC,EAAAA,QAAQ,EAAE;AAApC,CADW,EAEX;AAAEF,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,KAAK,EAAE,QAAhB;AAA0BC,EAAAA,QAAQ,EAAE;AAApC,CAFW,EAGX;AAAEF,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,KAAK,EAAE,QAAhB;AAA0BC,EAAAA,QAAQ,EAAE;AAApC,CAHW,CAAb;;IAMMC,S;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AAAEL,MAAAA,IAAI,EAAJA;AAAF,K;;UAERM,iB,GAAoB,gBAAiC;AAAA,UAA9BC,OAA8B,QAA9BA,OAA8B;AAAA,UAArBC,KAAqB,QAArBA,KAAqB;AAAA,UAAdC,OAAc,QAAdA,OAAc;;AACnD,YAAKC,QAAL,CAAc,UAAAL,KAAK,EAAI;AACrB,YAAML,IAAI,GAAGK,KAAK,CAACL,IAAN,CAAWW,KAAX,EAAb;;AACA,aAAK,IAAIC,CAAC,GAAGL,OAAb,EAAsBK,CAAC,IAAIJ,KAA3B,EAAkCI,CAAC,EAAnC,EAAuC;AACrCZ,UAAAA,IAAI,CAACY,CAAD,CAAJ,qBAAeZ,IAAI,CAACY,CAAD,CAAnB,EAA2BH,OAA3B;AACD;;AACD,eAAO;AAAET,UAAAA,IAAI,EAAJA;AAAF,SAAP;AACD,OAND;AAOD,K;;;;;;;6BACQ;AAAA;;AACP,aACE,oBAAC,aAAD;AACE,QAAA,OAAO,EAAER,OADX;AAEE,QAAA,SAAS,EAAE,mBAAAoB,CAAC;AAAA,iBAAI,MAAI,CAACP,KAAL,CAAWL,IAAX,CAAgBY,CAAhB,CAAJ;AAAA,SAFd;AAGE,QAAA,SAAS,EAAE,CAHb;AAIE,QAAA,iBAAiB,EAAE,KAAKN,iBAJ1B;AAKE,QAAA,gBAAgB,EAAE,IALpB;AAME,QAAA,WAAW,EAAElB,iBANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAUD;;;;EAvBqBF,S;;AAyBxB,eAAekB,SAAf","sourcesContent":["\nimport React,{Component } from \"react\";\nimport ReactDataGrid from \"react-data-grid\";\nimport CustomRowRenderer from './CustomRowRenderer';\n\nconst defaultColumnProperties = {\n    // resizable: true,\n    frozen: true,\n    width: 120\n  };\n\nconst columns = [\n  { key: \"id\", name: \"ID\", editable: true },\n  { key: \"title\", name: \"Title\", editable: true },\n  { key: \"complete\", name: \"Complete\", editable: true }\n].map(c => { \n    console.log(c);\n    // return (...c, ...defaultColumnProperties); \n});\n\nconst rows = [\n  { id: 0, title: \"Task 1\", complete: 20 },\n  { id: 1, title: \"Task 2\", complete: 40 },\n  { id: 2, title: \"Task 3\", complete: 60 }\n];\n\nclass datagridV extends Component {\n  state = { rows };\n\n  onGridRowsUpdated = ({ fromRow, toRow, updated }) => {\n    this.setState(state => {\n      const rows = state.rows.slice();\n      for (let i = fromRow; i <= toRow; i++) {\n        rows[i] = { ...rows[i], ...updated };\n      }\n      return { rows };\n    });\n  };\n  render() {\n    return (\n      <ReactDataGrid\n        columns={columns}\n        rowGetter={i => this.state.rows[i]}\n        rowsCount={3}\n        onGridRowsUpdated={this.onGridRowsUpdated}\n        enableCellSelect={true}\n        rowRenderer={CustomRowRenderer}\n      />\n    );\n  }\n}\nexport default datagridV;\n\n\n"]},"metadata":{},"sourceType":"module"}